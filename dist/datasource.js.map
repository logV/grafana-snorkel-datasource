{"version":3,"sources":["../src/datasource.js"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;mCAAa;AAEX,iBAFW,iBAEX,CAAY,gBAAZ,EAA8B,EAA9B,EAAkC,UAAlC,EAA8C;gCAFnC,mBAEmC;;AAC5C,eAAK,IAAL,GAAY,iBAAiB,IAAjB,CADgC;AAE5C,eAAK,GAAL,GAAW,iBAAiB,GAAjB,CAFiC;AAG5C,eAAK,IAAL,GAAY,iBAAiB,IAAjB,CAHgC;AAI5C,eAAK,CAAL,GAAS,EAAT,CAJ4C;AAK5C,eAAK,UAAL,GAAkB,UAAlB,CAL4C;SAA9C;;;;;qBAFW;;gCAWL,SAAS;AACb,gBAAI,SAAS,QAAQ,OAAR,CAAgB,CAAhB,CAAT,CADS;AAEb,gBAAI,SAAS,OAAO,KAAP,CAFA;;AAIb,mBAAO,KAAK,UAAL,CAAgB,iBAAhB,CAAkC;AACvC,mBAAK,KAAK,GAAL,GAAW,iBAAX,GAA+B,MAA/B;AACL,sBAAQ,KAAR;AACA,uBAAS,EAAE,gBAAgB,kBAAhB,EAAX;aAHK,EAIJ,UAAS,IAAT,EAAe,EAAf,EAAmB,EAAnB,CAJH,CAJa;;;;2CAeE;AACf,mBAAO,KAAK,UAAL,CAAgB,iBAAhB,CAAkC;AACvC,mBAAK,KAAK,GAAL,GAAW,aAAX;AACL,sBAAQ,KAAR;aAFK,EAGJ,IAHI,CAGC,oBAAY;AAClB,kBAAI,SAAS,MAAT,KAAoB,GAApB,EAAyB;AAC3B,uBAAO,EAAE,QAAQ,SAAR,EAAmB,SAAS,wBAAT,EAAmC,OAAO,SAAP,EAA/D,CAD2B;eAA7B;aADM,CAHR,CADe;;;;yCAWF,QAAQ;AACrB,mBAAO,EAAE,GAAF,CAAM,OAAO,IAAP,EAAa,UAAC,CAAD,EAAI,CAAJ,EAAU;AAClC,qBAAO,EAAE,MAAM,CAAN,EAAS,OAAO,CAAP,EAAlB,CADkC;aAAV,CAA1B,CADqB;;;;eArCZ","file":"datasource.js","sourcesContent":["export class GenericDatasource {\n\n  constructor(instanceSettings, $q, backendSrv) {\n    this.type = instanceSettings.type;\n    this.url = instanceSettings.url;\n    this.name = instanceSettings.name;\n    this.q = $q;\n    this.backendSrv = backendSrv;\n  }\n\n  // Called once per panel (graph)\n  query(options) {\n    var target = options.targets[0];\n    var params = target.query;\n\n    return this.backendSrv.datasourceRequest({\n      url: this.url + '/query/grafana?' + params,\n      method: 'GET',\n      headers: { 'Content-Type': 'application/json' }\n    }, function(data, cb) {\n    \n    });\n  }\n\n  // Required\n  // Used for testing datasource in datasource configuration pange\n  testDatasource() {\n    return this.backendSrv.datasourceRequest({\n      url: this.url + '/pkg/status',\n      method: 'GET'\n    }).then(response => {\n      if (response.status === 200) {\n        return { status: \"success\", message: \"Data source is working\", title: \"Success\" };\n      }\n    });\n  }\n\n  mapToTextValue(result) {\n    return _.map(result.data, (d, i) => {\n      return { text: d, value: i};\n    });\n  }\n\n}\n"]}