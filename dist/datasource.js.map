{"version":3,"sources":["../src/datasource.js"],"names":[],"mappings":";;;;;;;;;;;;;;AACA,WAAS,iBAAT,CAA2B,GAA3B,EAAgC;AAC5B,QAAI,QAAQ,IAAI,KAAJ,CAAU,GAAV,CAAZ;AACA,QAAI,SAAS,EAAb;AACA,UAAM,OAAN,CAAc,UAAS,IAAT,EAAe;AACzB,aAAO,KAAK,KAAL,CAAW,GAAX,CAAP;AACA,UAAI,OAAO,KAAK,CAAL,CAAX;AACA,UAAI,QAAQ,KAAK,CAAL,CAAZ;AACA,UAAI,KAAK,MAAT,EACI,IAAI,OAAO,IAAP,MAAiB,SAArB,EAAgC;AAC5B,YAAI,CAAC,OAAO,IAAP,EAAa,IAAlB,EAAwB;AACpB,iBAAO,IAAP,IAAe,CAAC,OAAO,IAAP,CAAD,CAAf;AACH;AACL,eAAO,IAAP,EAAa,IAAb,CAAkB,SAAS,EAA3B;AACC,OALD,MAKO;AACH,eAAO,IAAP,IAAe,SAAS,EAAxB;AACH;AACR,KAbD;AAcA,WAAQ,MAAR;AACH;;;;;;;;;;;;;;;;;;;;;;;mCAEY,iB;AAEX,mCAAY,gBAAZ,EAA8B,EAA9B,EAAkC,UAAlC,EAA8C;AAAA;;AAC5C,eAAK,IAAL,GAAY,iBAAiB,IAA7B;AACA,eAAK,GAAL,GAAW,iBAAiB,GAA5B;AACA,eAAK,IAAL,GAAY,iBAAiB,IAA7B;AACA,eAAK,CAAL,GAAS,EAAT;AACA,eAAK,UAAL,GAAkB,UAAlB;AACD;;;;;;;gCAGK,O,EAAS;AACb,gBAAI,SAAS,QAAQ,OAAR,CAAgB,CAAhB,CAAb;AACA,gBAAI,SAAS,OAAO,KAApB;;AAEA,gBAAI,WAAW,kBAAkB,MAAlB,CAAf;;AAEA,gBAAI,WAAW;AACb,mBAAM,KAAK,EAAL,GAAU,EADH;AAEb,mBAAM,KAAK,EAFE;AAGb,mBAAM,EAHO;AAIb,mBAAM;AAJO,aAAf;;AAOA,qBAAS,KAAT,GAAiB,QAAQ,KAAR,CAAc,IAAd,CAAmB,EAApC;AACA,qBAAS,GAAT,GAAe,QAAQ,KAAR,CAAc,EAAd,CAAiB,EAAhC;;AAEA,gBAAI,WAAW,SAAS,QAAQ,QAAjB,EAA2B,EAA3B,CAAf;AACA,gBAAI,SAAS,QAAQ,QAAR,CAAiB,OAAjB,CAAyB,QAAzB,EAAmC,EAAnC,CAAb;AACA,gBAAI,UAAU,WAAW,SAAS,MAAT,CAAzB;;AAEA,qBAAS,WAAT,GAAuB,OAAvB;;AAEA,qBAAS,EAAE,KAAF,CAAQ,QAAR,CAAT;;AAEA,mBAAO,KAAK,UAAL,CAAgB,iBAAhB,CAAkC;AACvC,mBAAK,KAAK,GAAL,GAAW,iBAAX,GAA+B,MADG;AAEvC,sBAAQ,KAF+B;AAGvC,uBAAS,EAAE,gBAAgB,kBAAlB;AAH8B,aAAlC,EAIJ,UAAS,IAAT,EAAe,EAAf,EAAmB,CAErB,CANM,CAAP;AAOD;;;2CAIgB;AACf,mBAAO,KAAK,UAAL,CAAgB,iBAAhB,CAAkC;AACvC,mBAAK,KAAK,GAAL,GAAW,aADuB;AAEvC,sBAAQ;AAF+B,aAAlC,EAGJ,IAHI,CAGC,oBAAY;AAClB,kBAAI,SAAS,MAAT,KAAoB,GAAxB,EAA6B;AAC3B,uBAAO,EAAE,QAAQ,SAAV,EAAqB,SAAS,wBAA9B,EAAwD,OAAO,SAA/D,EAAP;AACD;AACF,aAPM,CAAP;AAQD;;;yCAEc,M,EAAQ;AACrB,mBAAO,EAAE,GAAF,CAAM,OAAO,IAAb,EAAmB,UAAC,CAAD,EAAI,CAAJ,EAAU;AAClC,qBAAO,EAAE,MAAM,CAAR,EAAW,OAAO,CAAlB,EAAP;AACD,aAFM,CAAP;AAGD","file":"datasource.js","sourcesContent":["// from stackoverflow \nfunction QueryStringToJSON(str) {            \n    var pairs = str.split('&');\n    var result = {};\n    pairs.forEach(function(pair) {\n        pair = pair.split('=');\n        var name = pair[0]\n        var value = pair[1]\n        if( name.length )\n            if (result[name] !== undefined) {\n                if (!result[name].push) {\n                    result[name] = [result[name]];\n                }\n            result[name].push(value || '');\n            } else {\n                result[name] = value || '';\n            }\n    });\n    return( result );\n}\n\nexport class GenericDatasource {\n\n  constructor(instanceSettings, $q, backendSrv) {\n    this.type = instanceSettings.type;\n    this.url = instanceSettings.url;\n    this.name = instanceSettings.name;\n    this.q = $q;\n    this.backendSrv = backendSrv;\n  }\n\n  // Called once per panel (graph)\n  query(options) {\n    var target = options.targets[0];\n    var params = target.query;\n\n    var queryObj = QueryStringToJSON(params);\n\n    var suffixes = {\n      \"d\" : 24 * 60 * 60,\n      \"h\" : 60 * 60,\n      \"m\" : 60,\n      \"s\" : 1,\n    };\n\n    queryObj.start = options.range.from._d;\n    queryObj.end = options.range.to._d;\n\n    var interval = parseInt(options.interval, 10);\n    var suffix = options.interval.replace(interval, \"\");\n    var seconds = interval * suffixes[suffix];\n\n    queryObj.time_bucket = seconds;\n\n    params = $.param(queryObj);\n\n    return this.backendSrv.datasourceRequest({\n      url: this.url + '/query/grafana?' + params,\n      method: 'GET',\n      headers: { 'Content-Type': 'application/json' }\n    }, function(data, cb) {\n    \n    });\n  }\n\n  // Required\n  // Used for testing datasource in datasource configuration pange\n  testDatasource() {\n    return this.backendSrv.datasourceRequest({\n      url: this.url + '/pkg/status',\n      method: 'GET'\n    }).then(response => {\n      if (response.status === 200) {\n        return { status: \"success\", message: \"Data source is working\", title: \"Success\" };\n      }\n    });\n  }\n\n  mapToTextValue(result) {\n    return _.map(result.data, (d, i) => {\n      return { text: d, value: i};\n    });\n  }\n\n}\n"]}