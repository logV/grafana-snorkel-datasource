{"version":3,"sources":["../src/datasource.js"],"names":[],"mappings":"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","file":"datasource.js","sourcesContent":["// from stackoverflow \nfunction QueryStringToJSON(str) {            \n    var pairs = str.split('&');\n    var result = {};\n    pairs.forEach(function(pair) {\n        pair = pair.split('=');\n        var name = pair[0]\n        var value = pair[1]\n        if( name.length )\n            if (result[name] !== undefined) {\n                if (!result[name].push) {\n                    result[name] = [result[name]];\n                }\n            result[name].push(value || '');\n            } else {\n                result[name] = value || '';\n            }\n    });\n    return( result );\n}\n\nexport class GenericDatasource {\n\n  constructor(instanceSettings, $q, backendSrv) {\n    this.type = instanceSettings.type;\n    this.url = instanceSettings.url;\n    this.name = instanceSettings.name;\n    this.q = $q;\n    this.backendSrv = backendSrv;\n  }\n\n  // Called once per panel (graph)\n  query(options) {\n    var target = options.targets[0];\n    var params = target.query;\n\n    var queryObj = QueryStringToJSON(params);\n\n    var suffixes = {\n      \"d\" : 24 * 60 * 60,\n      \"h\" : 60 * 60,\n      \"m\" : 60,\n      \"s\" : 1,\n    };\n\n    queryObj.start = options.range.from._d;\n    queryObj.end = options.range.to._d;\n\n    var interval = parseInt(options.interval, 10);\n    var suffix = options.interval.replace(interval, \"\");\n    var seconds = interval * suffixes[suffix];\n\n    queryObj.time_bucket = seconds;\n\n    params = $.param(queryObj);\n\n    return this.backendSrv.datasourceRequest({\n      url: this.url + '/query/grafana?' + params,\n      method: 'GET',\n      headers: { 'Content-Type': 'application/json' }\n    }, function(data, cb) {\n    \n    });\n  }\n\n  // Required\n  // Used for testing datasource in datasource configuration pange\n  testDatasource() {\n    return this.backendSrv.datasourceRequest({\n      url: this.url + '/pkg/status',\n      method: 'GET'\n    }).then(response => {\n      if (response.status === 200) {\n        return { status: \"success\", message: \"Data source is working\", title: \"Success\" };\n      }\n    });\n  }\n\n  mapToTextValue(result) {\n    return _.map(result.data, (d, i) => {\n      return { text: d, value: i};\n    });\n  }\n\n}\n"]}