{"version":3,"sources":["../src/datasource.js"],"names":["QueryStringToJSON","str","pairs","split","result","forEach","pair","name","value","length","undefined","push","GenericDatasource","instanceSettings","$q","backendSrv","url","q","options","target","targets","params","query","queryObj","suffixes","start","range","from","_d","end","to","interval","parseInt","suffix","replace","seconds","time_bucket","$","param","datasourceRequest","method","headers","data","cb","then","response","status","message","title","_","map","d","i","text"],"mappings":"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","file":"datasource.js","sourcesContent":["// from stackoverflow\nfunction QueryStringToJSON(str) {\n    var pairs = str.split('&');\n    var result = {};\n    pairs.forEach(function(pair) {\n        pair = pair.split('=');\n        var name = pair[0]\n        var value = pair[1]\n        if( name.length )\n            if (result[name] !== undefined) {\n                if (!result[name].push) {\n                    result[name] = [result[name]];\n                }\n            result[name].push(value || '');\n            } else {\n                result[name] = value || '';\n            }\n    });\n    return( result );\n}\n\nexport class GenericDatasource {\n\n  constructor(instanceSettings, $q, backendSrv) {\n    this.url = instanceSettings.url;\n    this.q = $q;\n    this.backendSrv = backendSrv;\n  }\n\n  // Called once per panel (graph)\n  query(options) {\n    var target = options.targets[0];\n    var params = target.query;\n\n    var queryObj = QueryStringToJSON(params);\n\n    var suffixes = {\n      \"d\" : 24 * 60 * 60,\n      \"h\" : 60 * 60,\n      \"m\" : 60,\n      \"s\" : 1,\n    };\n\n    queryObj.start = options.range.from._d;\n    queryObj.end = options.range.to._d;\n\n    var interval = parseInt(options.interval, 10);\n    var suffix = options.interval.replace(interval, \"\");\n    var seconds = interval * suffixes[suffix];\n\n    queryObj.time_bucket = seconds;\n\n    params = $.param(queryObj);\n\n    return this.backendSrv.datasourceRequest({\n      url: this.url + '/query/grafana?' + params,\n      method: 'GET',\n      headers: { 'Content-Type': 'application/json' }\n    }, function(data, cb) {\n\n    });\n  }\n\n  // Required\n  // Used for testing datasource in datasource configuration pange\n  testDatasource() {\n    return this.backendSrv.datasourceRequest({\n      url: this.url + '/pkg/status',\n      method: 'GET'\n    }).then(response => {\n      if (response.status === 200) {\n        return { status: \"success\", message: \"Data source is working\", title: \"Success\" };\n      }\n    });\n  }\n\n  mapToTextValue(result) {\n    return _.map(result.data, (d, i) => {\n      return { text: d, value: i};\n    });\n  }\n\n}\n"]}